@page "/sort"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<div class="container-fluid">
   

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Sorting Store Apps</h3>
    </div>

    <div class="row" style="margin:25px;">

                        @if (StoreApps != null)
                        {
                            <table class="table table-bordered table-striped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>
                                            Id
                                            <button @onclick="@OrderIdASC" value="Id">ASC</button>
                                            <button @onclick="@OrderIdDSC" value="Id">DSC</button>
                                        </th>
                                        <th>
                                            Name
                                            <button @onclick="@OrderNameASC" value="Name">ASC</button>
                                            <button @onclick="@OrderNameDSC" value="Name">DSC</button>
                                        </th>
                                        <th>
                                            Rating
                                            <button @onclick="@OrderRatingASC" value="Rating">ASC</button>
                                            <button @onclick="@OrderRatingDSC" value="Rating">DSC</button>
                                        </th>
                                        <th>
                                           Price
                                            <button @onclick="@OrderPriceASC" value="Price">ASC</button>
                                            <button @onclick="@OrderPriceDSC" value="Price">DSC</button>
                                        </th>
                                        <th>Id</th>
                                        <th>Name</th>
                                        <th>Rating</th>
                                        <th>People</th>
                                        <th>Category</th>
                                        <th>Date</th>
                                        <th>Price</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var storeapp in StoreApps)
                                    {
                                        <tr class="justify-content-center">
                                            <td>@storeapp.Id</td>
                                            <td>@storeapp.Name</td>
                                            <td>@storeapp.Rating</td>
                                            <td>@storeapp.People</td>
                                            <td>@storeapp.Category</td>
                                            <td>@storeapp.Date</td>
                                            <td>@storeapp.Price</td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        @if (!StoreApps.Any())
                        {
                            <div class="justify-content-center">
                                <h5>No records to show</h5>
                            </div>
                        }
</div>
   
</div>

@code {
    //  private string to store response body 
    private string responseBody = "";


    private bool IsSortedAscending;
    List<StoreApp> StoreApps = new List<StoreApp>();

 

    // OnInitializedAsync() to call request
        protected override async Task OnInitializedAsync()
    {
        //changed path to url of API which is running on different port
        var apiName = "https://team2-api.azurewebsites.net/api/StoreApps/";

        // the api name (url) is passed into the GetAsync method and it will wait for a response before continuing
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {  //// conditional statement to check if status code is successful (200)
           // resposnseBody variable waits for the content
           // once received it is passed onto JsonConvert 

            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);

            // notifying UI to re-render 
            StateHasChanged();
        }

    }
}

<table class="table">
    <thread>
        <tr>
            <td class="sort-link" @onclick=@(() => SortTable("ID"))>Id </td>

            <td class="sort-link" @onclick=@(() => SortTable("Name"))>Name </td>

            <td class="sort-link" @onclick=@(() => SortTable("Rating"))>Rating </td>

            <td class="sort-link" @onclick=@(() => SortTable("People"))>People </td>

            <td class="sort-link" @onclick=@(() => SortTable("Category"))>Category </td>

            <td class="sort-link" @onclick=@(() => SortTable("Date"))>Date </td>

            <td class="sort-link" @onclick=@(() => SortTable("Price"))>Price </td>
        


        </tr>
    </thread>
</table>



@foreach (var storeapp in StoreApps)
{
    <table class="table">
        <tr class="justify-content-center">
            <td>@storeapp.Id</td>
            <td>@storeapp.Name</td>
            <td>@storeapp.Rating</td>
            <td>@storeapp.People</td>
            <td>@storeapp.Category</td>
            <td>@storeapp.Date</td>
            <td>@storeapp.Price</td>

        </tr>

    </table>
}
}


@code{


    private void SortTable(string columnName)
    {
        if (IsSortedAscending)
        {

            foreach (var storeapp in StoreApps)

            {
                String sourceDate = storeapp.Date;
                DateTime dateNew = DateTime.Parse(storeapp.Date);
                String formatted = dateNew.ToString("yyyy/MM/dd");
                storeapp.Date = formatted;
            }
            StoreApps = StoreApps.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }
        else
        {

            IsSortedAscending = !IsSortedAscending;

        }
    }
    public async Task GetSortAsyncDSC(string order)
    {
        var apiName = "api/StoreApps/Sort/dsc?coulmn=";
        apiName += order;
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            StateHasChanged();
        }

    }

    public void OrderIdASC()
    {
        StoreApps.Sort((x, y) => x.Id.CompareTo(y.Id));
    }

    public void OrderIdDSC()
    {
        StoreApps.Sort((x, y) => y.Id.CompareTo(x.Id));
    }

    public void OrderNameASC()
    {
        StoreApps.Sort((x, y) => x.Name.CompareTo(y.Name));
    }

    public void OrderNameDSC()
    {
        StoreApps.Sort((x, y) => y.Name.CompareTo(x.Name));
    }

    public void OrderRatingASC()
    {
        StoreApps.Sort((x, y) => x.Rating.CompareTo(y.Rating));
    }

    public void OrderRatingDSC()
    {
        StoreApps.Sort((x, y) => y.Rating.CompareTo(x.Rating));
    }

    public void OrderPriceASC()
    {
        StoreApps.Sort((x, y) => x.Price.CompareTo(y.Price));
    }

    public void OrderPriceDSC()
    {
        StoreApps.Sort((x, y) => y.Price.CompareTo(x.Price));
    }

    public void OrderPeopleASC()
    {
        StoreApps.Sort((x, y) => x.People.CompareTo(y.People));
    }

    public void OrderPeopleDSC()
    {
        StoreApps.Sort((x, y) => y.People.CompareTo(x.People));
    }

    public void OrderCategoryASC()
    {
        StoreApps.Sort((x, y) => x.Category.CompareTo(y.Category));
    }

    public void OrderCategoryDSC()
    {
        StoreApps.Sort((x, y) => y.Category.CompareTo(x.Category));
    }



}
