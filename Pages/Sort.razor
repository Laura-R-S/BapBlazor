@page "/sort"

@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

<div class="container-fluid">
    <!--The container fluid is the class coming from Bootstrap -->

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Store Apps - First Ten Records</h3>
    </div>

    <div class="row" style="margin:25px;">
        <!--this is checking if null undefined show nothing - at the start of load it is usually blank-->
        @if (StoreApps != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    <!--For loop to iterate over store apps to display the apps -->
                    @foreach (var storeapp in StoreApps)
                    {
                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <!-- C# to output the id and name of the app which is from Store App class and here is where the getters and setters are defined -->
                        </tr>
                    }
                </tbody>
            </table>
        }     <!-- boolean expression to display No records message if the database contains no apps -->
        @if (!StoreApps.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>
   
</div>

@code {
    //  private string to store response body 
    private string responseBody = "";


    private bool IsSortedAscending;
    List<StoreApp> StoreApps = new List<StoreApp>();

    // OnInitializedAsync() to call request
    protected override async Task OnInitializedAsync()
    {
        //changed path to url of API which is running on different port
        var apiName = "https://localhost:44308/api/StoreApps/FirstTen";

        // the api name (url) is passed into the GetAsync method and it will wait for a response before continuing
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {  //// conditional statement to check if status code is successful (200)
           // resposnseBody variable waits for the content
           // once received it is passed onto JsonConvert 

            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);

            // notifying UI to re-render 
            StateHasChanged();
        }

    }
}

<table class="table">
    <thread>
        <tr>
            <td class="sort-link" @onclick=@(() => SortTable("ID"))>Id </td>

            <td class="sort-link" @onclick=@(() => SortTable("Name"))>Name </td>

            <td class="sort-link" @onclick=@(() => SortTable("Rating"))>Rating </td>

            <td class="sort-link" @onclick=@(() => SortTable("People"))>People </td>

            <td class="sort-link" @onclick=@(() => SortTable("Category"))>Category </td>

            <td class="sort-link" @onclick=@(() => SortTable("Date"))>Date </td>

            <td class="sort-link" @onclick=@(() => SortTable("Price"))>Price </td>


        </tr>
    </thread>
</table>


<!--accessing objects in the storeApp class using the dot operator. The Dot operator is used to assess class or structures.-->
@foreach (var storeapp in StoreApps)
{
    <table class="table">
        <tr class="justify-content-center">
            <td>@storeapp.Id</td>
            <td>@storeapp.Name</td>
            <td>@storeapp.Rating</td>
            <td>@storeapp.People</td>
            <td>@storeapp.Category</td>
            <td>@storeapp.Date</td>
            <td>@storeapp.Price</td>

        </tr>

    </table>
}
}


@code{

    private void SortTable(string columnName)
    {
        if (IsSortedAscending)
        {

            foreach (var storeapp in StoreApps)

            {
                String sourceDate = storeapp.Date;
                DateTime dateNew = DateTime.Parse(storeapp.Date);
                String formatted = dateNew.ToString("yyyy/MM/dd");
                storeapp.Date = formatted;
            }
            StoreApps = StoreApps.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x)).ToList();
        }
        else
        {
            <!--Returns: true if the sort order is ascending -->
            IsSortedAscending = !IsSortedAscending;
        }

    }
}



}





}
}