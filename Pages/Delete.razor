@page "/delete"
@using System.Net.Http

@inject HttpClient Http
@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger


<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Delete Single App</h3>
    </div>

    <div class="row" style="margin:25px;">
        @if (StoreApps != null) {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Delete</th> <!--added delete to table head-->
                    </tr>
                </thead>
                <tbody>
                    <!--For loop to iterate over store apps to display the apps -->
                    @foreach (var storeapp in StoreApps) {
                    <tr class="justify-content-center">
                        <!-- C# to output the id and name of the app which is from Store App class where getters and setters are defined -->
                        <td>@storeapp.Id</td>
                        <td>@storeapp.Name</td>

                        <!--  The href point to the front end delete page. Lambda expression to capture the store app to be deleted  -->

                        <td><a href="/delete"@onclick="@(async () => await deleteRecord(storeapp))">Delete</a></td><!--added delete link to table row-->
              
                    </tr>
                    }
                </tbody>
            </table>
        }

        <!-- method to show message to user if the database contains no apps -->
        @if (!StoreApps.Any()) {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>

</div>

@code {


    // created variable to store end point (local host will change to point to Azure portal)
    private const string ServiceEndpoint = "https://localhost:44308/api/StoreApps";

    // created variable with an empty string to store the json response   
    string responseBody = "";

    // List object instantiated to store apps in a list to make it easier to iterate and perform actions 
    List<StoreApp> StoreApps = new List<StoreApp>();

    protected override async Task OnInitializedAsync() {
        // changed path to url of API which is running on different port using first ten for demonstration purposes 
        var httpResponse = await client.GetAsync($"{ServiceEndpoint}/FirstTen");

        // conditional statement to check is status code is successful (200)
        if (httpResponse.IsSuccessStatusCode) {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            // method till notify the frontend a change has been made 
            StateHasChanged();
        }
    }
    // delete record method that takes in storeapp parameter 
    private async Task deleteRecord(StoreApp storeapp) {
        var httpResponse = await client.DeleteAsync($"{ServiceEndpoint}/{storeapp.Id}");
        // calling method above --> OnInitializedAsync()
        await OnInitializedAsync();
    }
}
