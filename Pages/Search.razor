@page "/search"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<h1>Search</h1>

<p>This component demonstrates searching the datasaset.</p>

<p>One way to tackle this problem;</p>
<ul>
    <li>Start with pretty much the same code as FetchStoreApps.razor.</li>
    <li>Add a form to the page e.g. an input and a submit button.</li>
    <li>Create a new search model and method.</li>
    <li>When looping over StoreApps use IndexOf to test your search term.</li>
    <li><a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-5.0">Blazor Forms</a></li>
</ul>


<EditForm Model="@searchModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />



    <InputText id="name" @bind-Value="searchModel.Name" />



    <button type="submit" @onclick="@EnterUserInput">Search</button>



</EditForm>



<div class="container-fluid" style="background-color:cornsilk">



    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center" style="color:cornflowerblue">Microsoft Store Apps:<br />App Data</h3>



    </div>



    <div class="row" style="margin:25px;">



        @if (StoreApps != null)
        {
<table class="table table-bordered table-striped">
    <thead class="thead-light">
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Rating</th>
            <th>People</th>
            <th>Category</th>
            <th>Date</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var storeapp in StoreApps)
        {



<tr class="justify-content-center">
    <td>@storeapp.Id</td>
    <td>@storeapp.Name</td>
    <td>@storeapp.Rating</td>
    <td>@storeapp.People</td>
    <td>@storeapp.Category</td>
    <td>@storeapp.Date</td>
    <td>@storeapp.Price</td>



</tr>}
    </tbody>
</table>}



        @if (StoreApps == null)
        {
<div class="justify-content-center">
    <h5>No records to show</h5>
</div>}



    </div>



</div>



@code { public SearchModel searchModel = new();
            public List<StoreApp> StoreApps { get; set; }



            //if form entry is valid run this method
            private void HandleValidSubmit()
            {
                Logger.LogInformation("HandleValidSubmit called");
                Logger.LogInformation(searchModel.Name);



            }



            private async void EnterUserInput()
            {
                await GetSearch(searchModel.Name);
            }




            string responseBody = "";
            List<StoreApp> SearchResults = new List<StoreApp>();



            public async Task GetSearch(string search)
            {
                searchModel = new();
                var apiName = "api/StoreApps/";
                apiName += search;
                var httpResponse = await client.GetAsync(apiName);



                if (httpResponse.IsSuccessStatusCode)
                {
                    responseBody = await httpResponse.Content.ReadAsStringAsync();
                    StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
                    StateHasChanged();
                }



            } }



@*@code {

        string responseBody = "";
        List<StoreApp> StoreApps = new List<StoreApp>();

        protected override async Task OnInitializedAsync()
        {
            //changed path to url of API which is running on different port
            var apiName = "https://localhost:44308/api/StoreApps/FirstTen";
            var httpResponse = await client.GetAsync(apiName);

            if (httpResponse.IsSuccessStatusCode)
            {
                responseBody = await httpResponse.Content.ReadAsStringAsync();
                StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
                StateHasChanged();
            }

        }
    }*@
