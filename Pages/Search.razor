@page "/search"
@using System.Net.Http

@inject HttpClient client

@using Newtonsoft.Json
@using Data

@using Microsoft.Extensions.Logging
@inject ILogger<Search> Logger

<h1>Search</h1>

<p>This component demonstrates searching the datasaset.</p>


<!--https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-5.0 -->

<EditForm Model="@searchModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="name" @bind-Value="searchModel.InputValue" /> 
    <button type="submit">Search</button>


</EditForm>



<div class="container-fluid" style="background-color:cornsilk">


    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center" style="color:cornflowerblue">Microsoft Store Apps:<br />App Data</h3>

    </div>

    <div class="row" style="margin:25px;">



        @if (StoreApps != null) // The inequality operator != returns true if its operands are not equal, false otherwise.
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-light"> 
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Rating</th>
                        <th>People</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var storeapp in StoreApps)
                    {



                        <tr class="justify-content-center">
                            <td>@storeapp.Id</td>
                            <td>@storeapp.Name</td>
                            <td>@storeapp.Rating</td>
                            <td>@storeapp.People</td>
                            <td>@storeapp.Category</td>
                            <td>@storeapp.Date</td>
                            <td>@storeapp.Price</td>



                        </tr>
                    }
                </tbody>
            </table>}



        @if (StoreApps == null)
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>}



    </div>



</div>




@code {

    // Created a new object called “new SearchModel()”. It binds the Model attribute of the EditForm.
    SearchModel searchModel = new SearchModel();

    // ResponseBody can return the response body in a String format.
    string responseBody = " ";
    List<StoreApp> StoreApps = new List<StoreApp>(); //The List<T> is a collection of strongly typed objects that can be accessed by index and having methods for sorting, searching, and modifying list. 
    List<StoreApp> AllStoreApps = new List<StoreApp>();

    protected override async Task OnInitializedAsync() //To perform an asynchronous operation, override OnInitializedAsync and use the await operator
    {
        //changed path to url of API which is running on different port
        var apiName = "https://team2-api.azurewebsites.net/api/StoreApps/";

        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            responseBody = await httpResponse.Content.ReadAsStringAsync();
            StoreApps = JsonConvert.DeserializeObject<List<StoreApp>>(responseBody);
            AllStoreApps = StoreApps;
            StateHasChanged();

        }

    }
    public void HandleSubmit()
    {
        if (searchModel.InputValue == "" || searchModel.InputValue == null || searchModel.InputValue == " ")
        {
            StoreApps = AllStoreApps;


        }
        else
        {

            StoreApps = AllStoreApps.Where(app => app.Name.ToLower().Contains(searchModel.InputValue.ToLower())).ToList();

            if (StoreApps.Count() == 0)
            {
                StoreApps = AllStoreApps.Where(app => app.Category.ToLower().Contains(searchModel.InputValue.ToLower())).ToList();
            }


            Console.WriteLine(searchModel.InputValue);


        }

    }
} 